%loadplugin{feature::default_xs_typemap};

%typemap{IV}{simple};
%typemap{UV}{simple};
%typemap{NV}{simple};
%typemap{SV*}{simple};
%typemap{std::string}{simple};

%typemap{ast_op_type}{simple}{
    %xs_type{T_ENUM};
};

%typemap{ast_term_type}{simple}{
    %xs_type{T_ENUM};
};

%typemap{ast_op_class}{simple}{
    %xs_type{T_ENUM};
};

%typemap{ast_op_context}{simple}{
    %xs_type{T_ENUM};
};

%typemap{ast_variable_sigil}{simple}{
    %xs_type{T_ENUM};
};

%typemap{ast_value_type}{simple}{
    %xs_type{T_ENUM};
};

%typemap{ast_sort_algorithm_type}{simple}{
    %xs_type{T_ENUM};
};

%typemap{B::AST::Term *}{object}{
    %name{ast_term};
    %xs_type{O_AST};
    %xs_output_code{% if ($var) { sv_setref_pv( $arg, xsp_constructor_class($var->perl_class()), (void*)$var ); } %};
};

%typemap{const B::AST::Term *}{ast_term};

%typemap{std::vector<B::AST::Term *>}{parsed}{
    %cpp_type{%std::vector<PerlAST::AST::Term *>%};
    %output_list{%
        const unsigned int n = $CVar.size();
        EXTEND(SP, n);
        for (unsigned int i = 0; i < n; ++i) {
            PerlAST::AST::Term *t = $CVar[i];
            if (t != NULL) {
                SV *retval = sv_newmortal();
                sv_setref_pv( retval, xsp_constructor_class(t->perl_class()), (void*)t );
                PUSHs(retval);
            } else {
                PUSHs(&PL_sv_undef);
            }
        }
    %};
};

%typemap{B::AST::Value *}{object}{
    %name{ast_value};
    %xs_type{O_VALUE};
    %xs_output_code{% sv_setref_pv( $arg, xsp_constructor_class($var->perl_class()), (void*)$var ); %};
};

%typemap{const B::AST::Value *}{ast_value};

%typemap{std::vector<B::AST::Value *>}{parsed}{
    %name{ast_value_vector};
    %cpp_type{%std::vector<PerlAST::AST::Value *>%};
    %output_list{%
        const unsigned int n = $CVar.size();
        EXTEND(SP, n);
        for (unsigned int i = 0; i < n; ++i) {
            PerlAST::AST::Value *t = $CVar[i];
            if (t != NULL) {
                SV *retval = sv_newmortal();
                sv_setref_pv( retval, xsp_constructor_class(t->perl_class()), (void*)t );
                PUSHs(retval);
            } else {
                PUSHs(&PL_sv_undef);
            }
        }
    %};
};

%typemap{const std::vector<B::AST::Value *>}{ast_value_vector};

%typemap{const B::AST::BasicBlock *}{object};

%typemap{std::vector<B::AST::BasicBlock *>}{parsed}{
    %name{ast_basicblock_vector};
    %cpp_type{%std::vector<PerlAST::AST::BasicBlock *>%};
    %output_list{%
        const unsigned int n = $CVar.size();
        EXTEND(SP, n);
        for (unsigned int i = 0; i < n; ++i) {
            PerlAST::AST::BasicBlock *t = $CVar[i];
            if (t != NULL) {
                SV *retval = sv_newmortal();
                sv_setref_pv( retval, xsp_constructor_class("B::AST::BasicBlock"), (void*)t );
                PUSHs(retval);
            } else {
                PUSHs(&PL_sv_undef);
            }
        }
    %};
};

%typemap{const std::vector<B::AST::BasicBlock *>}{ast_basicblock_vector};
